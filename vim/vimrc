so $HOME/dotfiles/vim/vimplugins

filetype plugin indent on

"nerdtree
nmap <c-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif "close if only nerdtree is open
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "M",
    \ "Staged"    : "+",
    \ "Untracked" : "?",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "¤",
    \ "Deleted"   : "-",
    \ "Dirty"     : "!",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }
let NERDTreeQuitOnOpen=1
let NERDTreeMinimalUI = 1
"syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_auto_jump = 0


"generic
set formatoptions-=tc
set nowrap              " no visual text wrapping
set colorcolumn=80
set encoding=utf-8      " default encoding displayed.
set fileencoding=utf-8  " default encoding written to file.
set hidden
set errorbells	
set visualbell	
set clipboard=unnamedplus
set ruler
set undolevels=1000	
set backspace=indent,eol,start	
set number
set relativenumber
set exrc "project specific vimrc files

"tab completion 
set wildmode=longest,list,full
set wildmenu

"search
set showmatch	
set hlsearch	
set smartcase	
set ignorecase	
set incsearch	

"indent
set autoindent	
set cindent	
set expandtab	
set shiftwidth=2	
set smartindent	
set smarttab	
set softtabstop=2	

"modeline
set modeline
set modelines=5

"folding
"http://www.gregsexton.org/2011/03/improving-the-text-displayed-in-a-fold/
function CustomFoldText()
  "get first non-blank line
  let fs = v:foldstart
  while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
  endwhile
  if fs > v:foldend
    let line = getline(v:foldstart)
  else
    let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
  endif

  let w = winwidth(0) - &foldcolumn - (&number ? 4 : 0)
  let foldSize = 1 + v:foldend - v:foldstart
  let foldSizeStr = " " . foldSize . " lines "
  let lineCount = line("$")
  let expansionString = repeat(" ", w - strwidth(foldSizeStr.line))
  return line . expansionString . foldSizeStr
endfunction
:set foldtext=CustomFoldText()

"theme
syntax enable
set cursorline
let g:solarized_termtrans = 1
set background=dark
colorscheme solarized
set list
set listchars=tab:>.,trail:.,extends:>,precedes:<

"parentheses coloring

let g:rbpt_colorpairs = [
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ]
let g:rbpt_max = 8
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

"javascript
autocmd FileType javascript setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
let javascript_enable_domhtmlcss=1

"python
let g:SimpylFold_fold_import = 0
let g:SimpylFold_fold_docstring = 0

"bindings

"""""n means next:
"https://gist.github.com/AndrewRadev/1171559

onoremap an :<c-u>call <SID>NextTextObject('a')<cr>
xnoremap an :<c-u>call <SID>NextTextObject('a')<cr>
onoremap in :<c-u>call <SID>NextTextObject('i')<cr>
xnoremap in :<c-u>call <SID>NextTextObject('i')<cr>

function! s:NextTextObject(motion)
    echo
    let c = nr2char(getchar())
    exe "normal! f".c."v".a:motion.c
endfunction
"""""

"lock nasty crap beyond this file
set secure
